{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to OpenGEC to download visit the github repo . Instructions Go to the github repo and follow the instuctions in the README.md.","title":"Home"},{"location":"#welcome-to-opengec","text":"to download visit the github repo .","title":"Welcome to OpenGEC"},{"location":"#instructions","text":"Go to the github repo and follow the instuctions in the README.md.","title":"Instructions"},{"location":"about/","text":"What is OpenGEC OpenGEC is an open-source game engine licensed under the Mozzila license. What is it written in OpenGEC is written in C++, but you can script in lua. Dependencies GLFW Glad imgui lua sol2 nlohamman/json","title":"About"},{"location":"about/#what-is-opengec","text":"OpenGEC is an open-source game engine licensed under the Mozzila license.","title":"What is OpenGEC"},{"location":"about/#what-is-it-written-in","text":"OpenGEC is written in C++, but you can script in lua.","title":"What is it written in"},{"location":"about/#dependencies","text":"GLFW Glad imgui lua sol2 nlohamman/json","title":"Dependencies"},{"location":"docs/","text":"Documentation The documentation will be in C++. Application.h The base Application class. Classes: class Application Functions: Application::HandleInput(GLFWwindow* window); Application::Start(); Application::Update(); Compiler.h Classes: Manages lua. class Script Functions: Script::Run(); Script::Start(); Script::Update(); Script::HandleInput(GLFWwindow* m_window); Entrypoint.h The entrypoint of the application. Functions: int WinMain() Opengl.h Manages the opengl backend of the engine. Unfortunatly, there are too many classes and functions to show Serialization The serializer of the engine. Classes: class Binary Functions: Binary::Serialize(float col[3]); Binary::Deserialize(); Binary::SerializeQuad(TexturedQuad* quad); Binary::DeserilaizeQuad(TexturedQuad* quad); Shader.h The shader class. Classes: class Shader Functions: Shader::use(); Shader::setBool(const std::string& name, bool value); Shader::setInt(const std::string& name, int value); Shader::setFloat(const std::string& name, float value); Texture.h The texture class. Classes: class Texture Functions: Texture::getPath();","title":"Docs"},{"location":"docs/#documentation","text":"The documentation will be in C++.","title":"Documentation"},{"location":"docs/#applicationh","text":"The base Application class. Classes: class Application Functions: Application::HandleInput(GLFWwindow* window); Application::Start(); Application::Update();","title":"Application.h"},{"location":"docs/#compilerh","text":"Classes: Manages lua. class Script Functions: Script::Run(); Script::Start(); Script::Update(); Script::HandleInput(GLFWwindow* m_window);","title":"Compiler.h"},{"location":"docs/#entrypointh","text":"The entrypoint of the application. Functions: int WinMain()","title":"Entrypoint.h"},{"location":"docs/#openglh","text":"Manages the opengl backend of the engine. Unfortunatly, there are too many classes and functions to show","title":"Opengl.h"},{"location":"docs/#serialization","text":"The serializer of the engine. Classes: class Binary Functions: Binary::Serialize(float col[3]); Binary::Deserialize(); Binary::SerializeQuad(TexturedQuad* quad); Binary::DeserilaizeQuad(TexturedQuad* quad);","title":"Serialization"},{"location":"docs/#shaderh","text":"The shader class. Classes: class Shader Functions: Shader::use(); Shader::setBool(const std::string& name, bool value); Shader::setInt(const std::string& name, int value); Shader::setFloat(const std::string& name, float value);","title":"Shader.h"},{"location":"docs/#textureh","text":"The texture class. Classes: class Texture Functions: Texture::getPath();","title":"Texture.h"}]}